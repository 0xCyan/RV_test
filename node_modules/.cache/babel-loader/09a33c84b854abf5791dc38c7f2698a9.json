{"ast":null,"code":"var _jsxFileName = \"/Users/drew/code/RV_test/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [textFile, setTextFile] = useState(\"\");\n  const [commonWords, setCommonWords] = useState();\n  const [result, setResult] = useState(\"\");\n  const [threshold, setThreshold] = useState(10);\n\n  const loadTextFile = async event => {\n    event.preventDefault();\n    const fileReader = new FileReader();\n\n    fileReader.onload = async event => {\n      setTextFile(event.target.result);\n    };\n\n    fileReader.readAsText(event.target.files[0]);\n  };\n\n  const loadCommonWords = async event => {\n    event.preventDefault();\n    const fileReader = new FileReader();\n\n    fileReader.onload = async event => {\n      setCommonWords(event.target.result);\n    };\n\n    fileReader.readAsText(event.target.files[0]);\n  };\n\n  const updateThreshold = event => {\n    setThreshold(event.target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (textFile.length > 0 && commonWords.length > 0) {\n      const alpha = textFile.replace(/[^a-z0-9 ]/gi, '');\n      const textFileArr = alpha.split(\" \");\n      const commonWordsArr = commonWords.split(\"\\n\");\n      const filteredArr = textFileArr.filter(word => !commonWordsArr.includes(word)); // convert array to set so we don't hvae duplicates and we can begin counting the number of times we see a given word\n\n      let wordsToOccurrences = new Map();\n\n      for (const word of filteredArr) {\n        if (word.length > 0) {\n          if (wordsToOccurrences.has(word)) {\n            let prevCnt = wordsToOccurrences.get(word);\n            wordsToOccurrences.set(word, prevCnt + 1);\n          } else {\n            wordsToOccurrences.set(word, 1);\n          }\n        }\n      }\n\n      const sortedWords = new Map([...wordsToOccurrences.entries()].sort((a, b) => b[1] - a[1]));\n      let result = \"\";\n      let keys = sortedWords.keys();\n\n      for (let i = 0; i < threshold; i++) {\n        let key = keys.next().value;\n        result += sortedWords.get(key) + \"\\t\" + key + \"\\n\";\n      }\n\n      setResult(result);\n    } else {\n      alert(\"Files must be loaded to run app!\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Choose a text file:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"textFile\",\n        name: \"textFile\",\n        accept: \".txt\",\n        onChange: loadTextFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Choose common words file:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"commonWords\",\n        name: \"commonWords\",\n        accept: \".txt\",\n        onChange: loadCommonWords\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Display top: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"filterTop\",\n        name: \"filterTop\",\n        onChange: updateThreshold\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Run\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        whiteSpace: \"pre-wrap\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Result:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"o4uGdbO9sRzTY3/XpAR2wdMxfqA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","App","textFile","setTextFile","commonWords","setCommonWords","result","setResult","threshold","setThreshold","loadTextFile","event","preventDefault","fileReader","FileReader","onload","target","readAsText","files","loadCommonWords","updateThreshold","value","handleSubmit","length","alpha","replace","textFileArr","split","commonWordsArr","filteredArr","filter","word","includes","wordsToOccurrences","Map","has","prevCnt","get","set","sortedWords","entries","sort","a","b","keys","i","key","next","alert","whiteSpace"],"sources":["/Users/drew/code/RV_test/src/App.js"],"sourcesContent":["import { useState } from \"react\";\n\nfunction App() {\n\n  const [textFile, setTextFile] = useState(\"\");\n  const [commonWords, setCommonWords] = useState();\n  const [result, setResult] = useState(\"\");\n  const [threshold, setThreshold] = useState(10);\n\n  const loadTextFile = async (event) => {\n    event.preventDefault();\n    const fileReader = new FileReader();\n    fileReader.onload = async (event) => { \n      setTextFile(event.target.result);\n    };\n    fileReader.readAsText(event.target.files[0]);\n  }\n\n  const loadCommonWords = async (event) => {\n    event.preventDefault();\n    const fileReader = new FileReader();\n    fileReader.onload = async (event) => { \n      setCommonWords(event.target.result);\n    };\n    fileReader.readAsText(event.target.files[0]);\n  }\n\n  const updateThreshold = (event) => {\n    setThreshold(event.target.value);\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (textFile.length > 0 && commonWords.length > 0) {\n      const alpha = textFile.replace(/[^a-z0-9 ]/gi, '');\n      const textFileArr = alpha.split(\" \");\n      const commonWordsArr = commonWords.split(\"\\n\");\n  \n      const filteredArr = textFileArr.filter(word => !commonWordsArr.includes(word));\n  \n      // convert array to set so we don't hvae duplicates and we can begin counting the number of times we see a given word\n      let wordsToOccurrences = new Map();\n      for (const word of filteredArr) {\n        if (word.length > 0) {\n          if (wordsToOccurrences.has(word)) {\n            let prevCnt = wordsToOccurrences.get(word);\n            wordsToOccurrences.set(word, prevCnt + 1);\n          }\n          else {\n            wordsToOccurrences.set(word, 1);\n          }\n        }\n      }\n      const sortedWords = new Map([...wordsToOccurrences.entries()].sort((a, b) => b[1] - a[1]));\n      let result = \"\";\n      let keys = sortedWords.keys();\n      for (let i = 0; i < threshold; i++) {\n        let key = keys.next().value;\n        result += sortedWords.get(key) + \"\\t\" + key + \"\\n\";\n      }\n      setResult(result);\n    }\n    else {\n      alert(\"Files must be loaded to run app!\");\n    }\n  }\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <label>Choose a text file:</label>\n        <input\n          type=\"file\"\n          id=\"textFile\"\n          name=\"textFile\"\n          accept=\".txt\"\n          onChange={loadTextFile}\n        /> \n        <label>Choose common words file:</label>\n        <input\n          type=\"file\"\n          id=\"commonWords\"\n          name=\"commonWords\"\n          accept=\".txt\"\n          onChange={loadCommonWords}\n        />\n        <label>Display top: </label>\n        <input \n          type=\"number\"\n          id=\"filterTop\"\n          name=\"filterTop\"\n          onChange={updateThreshold}\n        />\n        <button type=\"submit\">Run</button>\n      </form>\n      <div style={{whiteSpace:\"pre-wrap\"}}>\n        <h3>Result:</h3>\n        <br></br>\n        <p>{result}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}